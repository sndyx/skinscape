<script lang="ts" context="module" >
    let focused;
</script>

<script lang="ts">
    import ColorPicker from './color/ColorPicker.svelte';
    import type { HsvaColor } from 'colord';

    import * as THREE from 'three';
    import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
    import { decode } from 'fast-png';
    import { createModel } from './util/models';
    import { onMount } from 'svelte';

    export let primary: HsvaColor;
    export let secondary: HsvaColor;
    export let hasPicker: boolean;
    export let renderer: THREE.WebGLRenderer;

    const CAMERA_POSITION = new THREE.Vector3(0, 0, 30);
    const CONTROLS_TARGET = new THREE.Vector3(0, 0, 0);
    const MAX_FPS = 60;

    let element: HTMLDivElement;

    let scene = new THREE.Scene();
    let camera = new THREE.PerspectiveCamera(70, 2, 0.1, 1000);
    camera.position.add(CAMERA_POSITION);

    let raycaster = new THREE.Raycaster();
    let mouse = new THREE.Vector2(0, 0);
    let clock = new THREE.Clock();

    let data = new Uint8Array(64 * 64 * 4);
    let texture = new THREE.DataTexture(data, 64, 64);
    texture.flipY = true;

    let smoothReset = false;
    let elapsedTime = 0;
    let deltaTime = 0;
    
    scene.add(camera);
    scene.add(new THREE.AmbientLight(0xffffff, 2));
    scene.background = new THREE.Color(0xBEC6CD);

    let controls = new OrbitControls(camera);
    controls.target.set(CONTROLS_TARGET.x, CONTROLS_TARGET.y, CONTROLS_TARGET.z);
    controls.rotateSpeed = 3;
    controls.maxDistance = 200;
    controls.minDistance = 10;

    let geometry = createModel('alex', texture);
    geometry.forEach((it) => { scene.add(it); });

    export function render() {
        // Lock animations at 60fps
        deltaTime = clock.getDelta()
        elapsedTime += deltaTime
        if (elapsedTime > 1 / MAX_FPS) {

            // if (smoothReset) doSmoothReset()
            controls.update()

            elapsedTime %= 1 / MAX_FPS
        }

        // Render
        const rect = element.getBoundingClientRect()
        const width = rect.right - rect.left
        const height = rect.bottom - rect.top
        const left = rect.left
        const bottom = renderer.domElement.clientHeight - rect.bottom

        renderer.setViewport(left, bottom, width, height)
        renderer.setScissor(left, bottom, width, height)

        camera.aspect = width / height
        camera.updateProjectionMatrix()

        renderer.render(scene, camera)    
    }

    $: pickerHeight = 10;
</script>

<div class="editor"
    bind:this={element}
>
    {#if hasPicker}
        <ColorPicker bind:primary bind:secondary bind:pickerHeight sliderHeight={pickerHeight / 6} />
    {/if}
    <div id="canvas" />
</div>

<style>
    .editor {
        flex: 1;
    }
</style>